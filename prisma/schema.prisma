generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  preferences   Json?     @default("{\"favoriteCategories\":[],\"notificationSettings\":{\"email\":true,\"sms\":false},\"language\":\"vi\"}")
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  orders        Order[]
  addresses     Address[]
  payments      Payment[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float       // Regular price
  salePrice   Float?      // Optional sale price
  sku         String?     // Stock keeping unit
  image       String
  colors      Color[]
  sizes       Size[]
  attributes  Attribute[]
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  trends      Trend[]     // Relationship to trends
  stock       Int
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id            String     @id @default(cuid())
  name          String
  parentId      String?
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: SetNull)
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   String
  payment     Payment     @relation(fields: [paymentId], references: [id])
  paymentId   String
  items       OrderItem[]
  reviews     Review[]
  status      OrderStatus @default(PENDING)
  total       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logo {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  fullName    String
  phone       String
  address     String
  city        String
  district    String
  ward        String
  isDefault   Boolean  @default(false)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  type          String   // credit_card, bank_transfer, etc.
  cardNumber    String?
  expiryDate    String?
  cardHolder    String?
  bankName      String?
  accountNumber String?
  isDefault     Boolean  @default(false)
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Color {
  id        String   @id @default(cuid())
  name      String
  value     String
  image     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id        String   @id @default(cuid())
  name      String
  value     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attribute {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Setting {
  key       String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trend {
  id           String    @id @default(cuid())
  name         String
  image        String
  productCount Int       @default(0)
  products     Product[] // Relationship to products
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
} 